const base64String = "";

        // Funci√≥n para decodificar base64
        function decodeBase64(base64) {
            // Reemplazar caracteres no v√°lidos
            base64 = base64.replace(/-/g, '+').replace(/_/g, '/');

            // Agregar padding si es necesario
            const padding = base64.length % 4;
            if (padding) {
                base64 += '='.repeat(4 - padding);
            }

            // Decodificar base64 a una cadena
            const decodedString = atob(base64);

            // Crear un elemento temporal para asignar el HTML decodificado
            const tempElement = document.createElement('div');
            tempElement.innerHTML = decodedString;
            return tempElement.innerHTML;
        }

        // Cuando el DOM est√© cargado, decodificar la cadena y mostrar el contenido
        document.addEventListener('DOMContentLoaded', () => {
            const decodedHtml = decodeBase64(base64String);
            document.getElementById('decodedContent').innerHTML = decodedHtml;
        });